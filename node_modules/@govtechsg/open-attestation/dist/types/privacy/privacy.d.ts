import { Signature } from "../signature";
export interface SignedDocument extends SchematisedDocument {
    signature: Signature;
}
export interface ObfuscationMetadata {
    obfuscatedData?: string[];
}
export interface SchematisedDocument extends Document {
    schema: string;
}
export interface Document {
    data: any;
    privacy?: ObfuscationMetadata;
    schema?: string;
}
export declare type OpenAttestationData = any;
export declare const getData: (document: Document) => any;
/**
 * Takes a partial originating document, possibly only with a schema.id and returns a document with the given data and obfuscated data
 * @param document the metadata container
 * @param data the data
 * @param obfuscatedData hashes of replaced data to put into the privacy field
 */
export declare const setData: <T extends SchematisedDocument | SignedDocument>(document: T, data: any, obfuscatedData?: string[]) => T;
export declare const obfuscateData: (_data: any, fields: string | string[]) => {
    data: any;
    obfuscatedData: string[];
};
export declare const obfuscateDocument: (document: SignedDocument, fields: string | string[]) => SignedDocument;
