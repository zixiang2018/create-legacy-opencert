import { digestDocument } from "./digest";
import { validate } from "./schema";
import { sign } from "./signature";
import { setData } from "./privacy";
import { saltData } from "./privacy/salt";
import * as utils from "./utils";
var createDocument = function (data, schema) {
    var document = setData({ schema: schema.$id, data: null }, saltData(data));
    var valid = validate(document, schema);
    if (valid) {
        return document;
    }
    throw new Error("Invalid document:" + JSON.stringify(data, null, 2));
};
export var issueDocument = function (data, schema) {
    var document = createDocument(data, schema);
    return sign(document, [digestDocument(document)]);
};
export var issueDocuments = function (dataArray, schema) {
    var documents = dataArray.map(function (data) { return createDocument(data, schema); });
    var batchHashes = documents.map(digestDocument);
    return documents.map(function (doc) { return sign(doc, batchHashes); });
};
export { digestDocument } from "./digest";
export { getData, obfuscateDocument } from "./privacy";
export { addSchema, validate as validateSchema } from "./schema";
export { checkProof, MerkleTree, sign, verify as verifySignature } from "./signature";
export { utils };
