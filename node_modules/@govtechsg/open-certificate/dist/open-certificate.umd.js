(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@govtechsg/open-attestation')) :
  typeof define === 'function' && define.amd ? define(['exports', '@govtechsg/open-attestation'], factory) :
  (global = global || self, factory(global['open-certificate'] = {}, global.openAttestation));
}(this, (function (exports, openAttestation) { 'use strict';

  openAttestation = openAttestation && Object.prototype.hasOwnProperty.call(openAttestation, 'default') ? openAttestation['default'] : openAttestation;

  var $id = "opencerts/v1.0";
  var $schema = "http://json-schema.org/draft-07/schema#";
  var type = "object";
  var properties = {
  	issuedOn: {
  		type: "string"
  	},
  	expiredOn: {
  		type: "string"
  	},
  	name: {
  		type: "string"
  	},
  	issuer: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			},
  			certificateStore: {
  				type: "string"
  			}
  		},
  		required: [
  			"name",
  			"certificateStore"
  		],
  		additionalProperties: false
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: false
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			],
  			additionalProperties: false
  		}
  	},
  	metadata: {
  		type: "object"
  	}
  };
  var required = [
  	"name",
  	"issuedOn",
  	"issuer",
  	"recipient"
  ];
  var additionalProperties = false;
  var schema = {
  	$id: $id,
  	$schema: $schema,
  	type: type,
  	properties: properties,
  	required: required,
  	additionalProperties: additionalProperties
  };

  var schema$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id,
    $schema: $schema,
    type: type,
    properties: properties,
    required: required,
    additionalProperties: additionalProperties,
    'default': schema
  });

  var $id$1 = "opencerts/v1.1";
  var $schema$1 = "http://json-schema.org/draft-07/schema#";
  var type$1 = "object";
  var properties$1 = {
  	issuedOn: {
  		type: "string"
  	},
  	expiredOn: {
  		type: "string"
  	},
  	name: {
  		type: "string"
  	},
  	issuer: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			},
  			certificateStore: {
  				type: "string"
  			}
  		},
  		required: [
  			"name",
  			"certificateStore"
  		],
  		additionalProperties: false
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: false
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			],
  			additionalProperties: false
  		}
  	},
  	metadata: {
  		type: "object"
  	}
  };
  var required$1 = [
  	"name",
  	"issuedOn",
  	"issuer",
  	"recipient"
  ];
  var additionalProperties$1 = false;
  var schema$2 = {
  	$id: $id$1,
  	$schema: $schema$1,
  	type: type$1,
  	properties: properties$1,
  	required: required$1,
  	additionalProperties: additionalProperties$1
  };

  var schema$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$1,
    $schema: $schema$1,
    type: type$1,
    properties: properties$1,
    required: required$1,
    additionalProperties: additionalProperties$1,
    'default': schema$2
  });

  var $id$2 = "opencerts/v1.2";
  var $schema$2 = "http://json-schema.org/draft-07/schema#";
  var type$2 = "object";
  var properties$2 = {
  	id: {
  		type: "string"
  	},
  	$template: {
  		type: "string"
  	},
  	issuedOn: {
  		type: "string",
  		format: "date-time",
  		examples: [
  			"2018-08-01T00:00:00+08:00"
  		]
  	},
  	expiredOn: {
  		type: "string",
  		format: "date-time"
  	},
  	admissionDate: {
  		type: "string",
  		format: "date-time"
  	},
  	graduationDate: {
  		type: "string",
  		format: "date-time"
  	},
  	cumulativeScore: {
  		type: "number"
  	},
  	name: {
  		type: "string"
  	},
  	issuers: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				did: {
  					type: "string"
  				},
  				url: {
  					type: "string",
  					format: "url"
  				},
  				email: {
  					type: "string",
  					format: "email"
  				},
  				phone: {
  					type: "string"
  				},
  				certificateStore: {
  					type: "string"
  				}
  			},
  			required: [
  				"name",
  				"certificateStore"
  			],
  			additionalProperties: false
  		},
  		exampples: [
  			{
  				name: "Blockchain Academy",
  				did: "DID:SG-UEN:U18274928E",
  				url: "https://blockchainacademy.com",
  				email: "registrar@blockchainacademy.com",
  				certificateStore: "0xd9580260be45c3c0c2fb259a82f219b513054012"
  			}
  		]
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: false
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				examinationDate: {
  					type: "string",
  					format: "date-time"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			]
  		}
  	},
  	additionalData: {
  		type: "object"
  	}
  };
  var required$2 = [
  	"id",
  	"name",
  	"issuedOn",
  	"issuers",
  	"recipient"
  ];
  var additionalProperties$2 = false;
  var schema$4 = {
  	$id: $id$2,
  	$schema: $schema$2,
  	type: type$2,
  	properties: properties$2,
  	required: required$2,
  	additionalProperties: additionalProperties$2
  };

  var schema$5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$2,
    $schema: $schema$2,
    type: type$2,
    properties: properties$2,
    required: required$2,
    additionalProperties: additionalProperties$2,
    'default': schema$4
  });

  var $id$3 = "opencerts/v1.3";
  var $schema$3 = "http://json-schema.org/draft-07/schema#";
  var type$3 = "object";
  var properties$3 = {
  	id: {
  		type: "string"
  	},
  	$template: {
  		type: "string"
  	},
  	issuedOn: {
  		type: "string",
  		format: "date-time",
  		examples: [
  			"2018-08-01T00:00:00+08:00"
  		]
  	},
  	expiresOn: {
  		type: "string",
  		format: "date-time"
  	},
  	admissionDate: {
  		type: "string",
  		format: "date-time"
  	},
  	graduationDate: {
  		type: "string",
  		format: "date-time"
  	},
  	cumulativeScore: {
  		type: "number"
  	},
  	name: {
  		type: "string"
  	},
  	issuers: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				did: {
  					type: "string"
  				},
  				url: {
  					type: "string",
  					format: "url"
  				},
  				email: {
  					type: "string",
  					format: "email"
  				},
  				phone: {
  					type: "string"
  				},
  				certificateStore: {
  					type: "string"
  				}
  			},
  			required: [
  				"name",
  				"certificateStore"
  			],
  			additionalProperties: false
  		},
  		exampples: [
  			{
  				name: "Blockchain Academy",
  				did: "DID:SG-UEN:U18274928E",
  				url: "https://blockchainacademy.com",
  				email: "registrar@blockchainacademy.com",
  				certificateStore: "0xd9580260be45c3c0c2fb259a82f219b513054012"
  			}
  		]
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: false
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				examinationDate: {
  					type: "string",
  					format: "date-time"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			]
  		}
  	},
  	additionalData: {
  		type: "object"
  	}
  };
  var required$3 = [
  	"id",
  	"name",
  	"issuedOn",
  	"issuers",
  	"recipient"
  ];
  var additionalProperties$3 = false;
  var schema$6 = {
  	$id: $id$3,
  	$schema: $schema$3,
  	type: type$3,
  	properties: properties$3,
  	required: required$3,
  	additionalProperties: additionalProperties$3
  };

  var schema$7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$3,
    $schema: $schema$3,
    type: type$3,
    properties: properties$3,
    required: required$3,
    additionalProperties: additionalProperties$3,
    'default': schema$6
  });

  var $id$4 = "opencerts/v1.4";
  var $schema$4 = "http://json-schema.org/draft-07/schema#";
  var type$4 = "object";
  var properties$4 = {
  	id: {
  		type: "string"
  	},
  	$template: {
  		type: "string"
  	},
  	description: {
  		type: "string"
  	},
  	issuedOn: {
  		type: "string",
  		format: "date-time"
  	},
  	expiresOn: {
  		type: "string",
  		format: "date-time"
  	},
  	admissionDate: {
  		type: "string",
  		format: "date-time"
  	},
  	graduationDate: {
  		type: "string",
  		format: "date-time"
  	},
  	cumulativeScore: {
  		type: "number"
  	},
  	name: {
  		type: "string"
  	},
  	issuers: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				did: {
  					type: "string"
  				},
  				url: {
  					type: "string",
  					format: "url"
  				},
  				email: {
  					type: "string",
  					format: "email"
  				},
  				phone: {
  					type: "string"
  				},
  				certificateStore: {
  					type: "string"
  				}
  			},
  			required: [
  				"name",
  				"certificateStore"
  			],
  			additionalProperties: true
  		},
  		minItems: 1
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: true
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				examinationDate: {
  					type: "string",
  					format: "date-time"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			]
  		}
  	},
  	additionalData: {
  		type: "object"
  	}
  };
  var required$4 = [
  	"id",
  	"name",
  	"issuedOn",
  	"issuers",
  	"recipient"
  ];
  var additionalProperties$4 = false;
  var schema$8 = {
  	$id: $id$4,
  	$schema: $schema$4,
  	type: type$4,
  	properties: properties$4,
  	required: required$4,
  	additionalProperties: additionalProperties$4
  };

  var schema$9 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$4,
    $schema: $schema$4,
    type: type$4,
    properties: properties$4,
    required: required$4,
    additionalProperties: additionalProperties$4,
    'default': schema$8
  });

  var $id$5 = "opencerts/v1.5";
  var $schema$5 = "http://json-schema.org/draft-07/schema#";
  var type$5 = "object";
  var properties$5 = {
  	id: {
  		type: "string"
  	},
  	$template: {
  		type: "string"
  	},
  	description: {
  		type: "string"
  	},
  	issuedOn: {
  		description: "The date that this certificate was issued by the issuer(s)",
  		type: "string",
  		format: "date-time"
  	},
  	expiresOn: {
  		type: "string",
  		format: "date-time"
  	},
  	admissionDate: {
  		type: "string",
  		format: "date-time"
  	},
  	graduationDate: {
  		description: "The date that this student graduated from the course",
  		type: "string",
  		format: "date-time"
  	},
  	attainmentDate: {
  		description: "The date that this qualification was awarded to the recipient",
  		type: "string",
  		format: "date-time"
  	},
  	qualificationLevel: {
  		type: "array",
  		description: "This is an array of objects used to attach descriptors from frameworks such as Singapore's SSEC-EQA or the internationally recognised ISCED. Multiple instances are allowed to indicate either equivalents or to indicate a multi-level qualifications",
  		items: {
  			type: "object",
  			required: [
  				"frameworkName",
  				"frameworkVersion",
  				"code",
  				"description"
  			],
  			properties: {
  				frameworkName: {
  					type: "string",
  					examples: [
  						"singapore/ssec-eqa",
  						"international/isced"
  					]
  				},
  				frameworkVersion: {
  					type: "string",
  					examples: [
  						"2015",
  						"2011"
  					]
  				},
  				code: {
  					type: "string",
  					examples: [
  						"51",
  						"55"
  					]
  				},
  				description: {
  					type: "string",
  					examples: [
  						"Polytechnic Diploma",
  						"(Short-cycle tertiary education) Vocational"
  					]
  				}
  			}
  		}
  	},
  	fieldOfStudy: {
  		type: "array",
  		description: "This is an array of objects used to attach descriptors from frameworks such as Singapore's SSEC-FOS or the internationally recognised ISCED-F. Multiple instances are allowed to indicate either equivalents or to indicate a multi-field qualification such as double degrees",
  		items: {
  			type: "object",
  			required: [
  				"frameworkName",
  				"frameworkVersion",
  				"code",
  				"description"
  			],
  			properties: {
  				frameworkName: {
  					type: "string",
  					description: "Prepend the actual framework name with the scope of the framework",
  					examples: [
  						"singapore/ssec-fos",
  						"international/isced-f"
  					]
  				},
  				frameworkVersion: {
  					type: "string",
  					examples: [
  						"2015",
  						"2013"
  					]
  				},
  				code: {
  					type: "string",
  					examples: [
  						"0897"
  					]
  				},
  				description: {
  					type: "string",
  					examples: [
  						"Biomedical Science"
  					]
  				}
  			}
  		}
  	},
  	cumulativeScore: {
  		type: "number"
  	},
  	name: {
  		type: "string"
  	},
  	issuers: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				did: {
  					type: "string"
  				},
  				url: {
  					type: "string",
  					format: "url"
  				},
  				email: {
  					type: "string",
  					format: "email"
  				},
  				phone: {
  					type: "string"
  				},
  				certificateStore: {
  					type: "string"
  				}
  			},
  			required: [
  				"name",
  				"certificateStore"
  			],
  			additionalProperties: true
  		},
  		minItems: 1
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			},
  			nric: {
  				type: "string"
  			},
  			fin: {
  				type: "string"
  			},
  			studentId: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: true
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				examinationDate: {
  					type: "string",
  					format: "date-time"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				},
  				languageMedium: {
  					description: "Language that the course was undertaken in",
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			]
  		}
  	},
  	additionalData: {
  		type: "object"
  	}
  };
  var required$5 = [
  	"id",
  	"name",
  	"issuedOn",
  	"issuers",
  	"recipient"
  ];
  var additionalProperties$5 = false;
  var schema$a = {
  	$id: $id$5,
  	$schema: $schema$5,
  	type: type$5,
  	properties: properties$5,
  	required: required$5,
  	additionalProperties: additionalProperties$5
  };

  var schema$b = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$5,
    $schema: $schema$5,
    type: type$5,
    properties: properties$5,
    required: required$5,
    additionalProperties: additionalProperties$5,
    'default': schema$a
  });

  var $id$6 = "opencerts/v2.0";
  var $schema$6 = "http://json-schema.org/draft-07/schema#";
  var type$6 = "object";
  var properties$6 = {
  	id: {
  		type: "string"
  	},
  	$template: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string",
  				description: "Template name to be use by template renderer to determine the template to use"
  			},
  			type: {
  				type: "string",
  				description: "Type of renderer template",
  				"enum": [
  					"EMBEDDED_RENDERER"
  				]
  			},
  			url: {
  				type: "string",
  				description: "URL of a decentralised renderer to render this document"
  			}
  		},
  		required: [
  			"name",
  			"type",
  			"url"
  		]
  	},
  	description: {
  		type: "string"
  	},
  	issuedOn: {
  		description: "The date that this certificate was issued by the issuer(s)",
  		type: "string",
  		format: "date-time"
  	},
  	expiresOn: {
  		type: "string",
  		format: "date-time"
  	},
  	admissionDate: {
  		type: "string",
  		format: "date-time"
  	},
  	graduationDate: {
  		description: "The date that this student graduated from the course",
  		type: "string",
  		format: "date-time"
  	},
  	attainmentDate: {
  		description: "The date that this qualification was awarded to the recipient",
  		type: "string",
  		format: "date-time"
  	},
  	qualificationLevel: {
  		type: "array",
  		description: "This is an array of objects used to attach descriptors from frameworks such as Singapore's SSEC-EQA or the internationally recognised ISCED. Multiple instances are allowed to indicate either equivalents or to indicate a multi-level qualifications",
  		items: {
  			type: "object",
  			required: [
  				"frameworkName",
  				"frameworkVersion",
  				"code",
  				"description"
  			],
  			properties: {
  				frameworkName: {
  					type: "string",
  					examples: [
  						"singapore/ssec-eqa",
  						"international/isced"
  					]
  				},
  				frameworkVersion: {
  					type: "string",
  					examples: [
  						"2015",
  						"2011"
  					]
  				},
  				code: {
  					type: "string",
  					examples: [
  						"51",
  						"55"
  					]
  				},
  				description: {
  					type: "string",
  					examples: [
  						"Polytechnic Diploma",
  						"(Short-cycle tertiary education) Vocational"
  					]
  				}
  			}
  		}
  	},
  	fieldOfStudy: {
  		type: "array",
  		description: "This is an array of objects used to attach descriptors from frameworks such as Singapore's SSEC-FOS or the internationally recognised ISCED-F. Multiple instances are allowed to indicate either equivalents or to indicate a multi-field qualification such as double degrees",
  		items: {
  			type: "object",
  			required: [
  				"frameworkName",
  				"frameworkVersion",
  				"code",
  				"description"
  			],
  			properties: {
  				frameworkName: {
  					type: "string",
  					description: "Prepend the actual framework name with the scope of the framework",
  					examples: [
  						"singapore/ssec-fos",
  						"international/isced-f"
  					]
  				},
  				frameworkVersion: {
  					type: "string",
  					examples: [
  						"2015",
  						"2013"
  					]
  				},
  				code: {
  					type: "string",
  					examples: [
  						"0897"
  					]
  				},
  				description: {
  					type: "string",
  					examples: [
  						"Biomedical Science"
  					]
  				}
  			}
  		}
  	},
  	cumulativeScore: {
  		type: "number"
  	},
  	name: {
  		type: "string"
  	},
  	issuers: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				did: {
  					type: "string"
  				},
  				url: {
  					type: "string",
  					format: "url"
  				},
  				email: {
  					type: "string",
  					format: "email"
  				},
  				phone: {
  					type: "string"
  				},
  				documentStore: {
  					type: "string"
  				},
  				certificateStore: {
  					type: "string"
  				},
  				identityProof: {
  					type: "object",
  					properties: {
  						type: {
  							type: "string",
  							"enum": [
  								"DNS-TXT"
  							]
  						},
  						location: {
  							type: "string",
  							description: "Url of the website referencing to document store"
  						}
  					},
  					required: [
  						"type",
  						"location"
  					],
  					additionalProperties: false
  				}
  			},
  			required: [
  				"name"
  			],
  			oneOf: [
  				{
  					required: [
  						"documentStore"
  					]
  				},
  				{
  					required: [
  						"certificateStore"
  					]
  				}
  			],
  			additionalProperties: true
  		},
  		minItems: 1
  	},
  	recipient: {
  		type: "object",
  		properties: {
  			name: {
  				type: "string"
  			},
  			did: {
  				type: "string"
  			},
  			url: {
  				type: "string"
  			},
  			email: {
  				type: "string"
  			},
  			phone: {
  				type: "string"
  			},
  			nric: {
  				type: "string"
  			},
  			fin: {
  				type: "string"
  			},
  			studentId: {
  				type: "string"
  			}
  		},
  		required: [
  			"name"
  		],
  		additionalProperties: true
  	},
  	transcript: {
  		type: "array",
  		items: {
  			type: "object",
  			properties: {
  				name: {
  					type: "string"
  				},
  				score: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				grade: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCredit: {
  					type: [
  						"number",
  						"string"
  					]
  				},
  				courseCode: {
  					type: "string"
  				},
  				examinationDate: {
  					type: "string",
  					format: "date-time"
  				},
  				url: {
  					type: "string"
  				},
  				description: {
  					type: "string"
  				},
  				languageMedium: {
  					description: "Language that the course was undertaken in",
  					type: "string"
  				}
  			},
  			required: [
  				"name"
  			]
  		}
  	},
  	additionalData: {
  		type: "object"
  	}
  };
  var required$6 = [
  	"id",
  	"name",
  	"issuedOn",
  	"issuers",
  	"recipient"
  ];
  var additionalProperties$6 = false;
  var schema$c = {
  	$id: $id$6,
  	$schema: $schema$6,
  	type: type$6,
  	properties: properties$6,
  	required: required$6,
  	additionalProperties: additionalProperties$6
  };

  var schema$d = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $id: $id$6,
    $schema: $schema$6,
    type: type$6,
    properties: properties$6,
    required: required$6,
    additionalProperties: additionalProperties$6,
    'default': schema$c
  });

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var require$$1 = getCjsExportFromNamespace(schema$1);

  var require$$2 = getCjsExportFromNamespace(schema$3);

  var require$$3 = getCjsExportFromNamespace(schema$5);

  var require$$4 = getCjsExportFromNamespace(schema$7);

  var require$$5 = getCjsExportFromNamespace(schema$9);

  var require$$6 = getCjsExportFromNamespace(schema$b);

  var require$$7 = getCjsExportFromNamespace(schema$d);

  const {
    getData,
    issueDocument,
    issueDocuments,
    addSchema,
    verifySignature,
    validateSchema,
    obfuscateDocument,
    MerkleTree
  } = openAttestation;

  /* eslint-disable global-require */
  // Disabling eslint for this because it doesn't make sense
  const schemas = {
    "1.0": require$$1,
    "1.1": require$$2,
    "1.2": require$$3,
    "1.3": require$$4,
    "1.4": require$$5,
    "1.5": require$$6,
    "2.0": require$$7
  };
  /* eslint-enable global-require */

  const defaultSchema = schemas["2.0"];

  // Start - Initialise all valid schema
  addSchema(Object.values(schemas));
  // End - Initialise all valid schema

  const issueCertificate = (data, schema = defaultSchema) =>
    issueDocument(data, schema);

  const issueCertificates = (dataArray, schema = defaultSchema) =>
    issueDocuments(dataArray, schema);

  const obfuscateFields = (document, fields) =>
    obfuscateDocument(document, fields);

  const certificateData = document => getData(document);

  var src = {
    issueCertificate,
    issueCertificates,
    verifySignature,
    validateSchema,
    obfuscateFields,
    certificateData,
    schemas,
    defaultSchema,
    MerkleTree
  };
  var src_1 = src.issueCertificate;
  var src_2 = src.issueCertificates;
  var src_3 = src.verifySignature;
  var src_4 = src.validateSchema;
  var src_5 = src.obfuscateFields;
  var src_6 = src.certificateData;
  var src_7 = src.schemas;
  var src_8 = src.defaultSchema;
  var src_9 = src.MerkleTree;

  exports.MerkleTree = src_9;
  exports.certificateData = src_6;
  exports.default = src;
  exports.defaultSchema = src_8;
  exports.issueCertificate = src_1;
  exports.issueCertificates = src_2;
  exports.obfuscateFields = src_5;
  exports.schemas = src_7;
  exports.validateSchema = src_4;
  exports.verifySignature = src_3;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
